// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package worker

import (
	"context"
	"github.com/authgear/authgear-nft-indexer/pkg/config"
	"github.com/authgear/authgear-nft-indexer/pkg/model"
	"github.com/authgear/authgear-nft-indexer/pkg/mutator"
	"github.com/authgear/authgear-nft-indexer/pkg/query"
	"github.com/authgear/authgear-nft-indexer/pkg/web3"
	"github.com/authgear/authgear-nft-indexer/pkg/worker/task"
	"github.com/uptrace/bun"
)

// Injectors from wire.go:

func NewWorker(ctx context.Context, config2 config.Config) Worker {
	worker := Worker{
		ctx:    ctx,
		config: config2,
	}
	return worker
}

func NewSyncETHNFTCollectionTaskHandler(ctx context.Context, config2 config.Config, session *bun.DB) model.Task {
	nftCollectionQuery := &query.NFTCollectionQuery{
		Ctx:     ctx,
		Session: session,
	}
	syncETHNFTCollectionTaskHandler := &task.SyncETHNFTCollectionTaskHandler{
		Config:             config2,
		NftCollectionQuery: nftCollectionQuery,
	}
	return syncETHNFTCollectionTaskHandler
}

func NewSyncETHNFTTransferTaskHandler(ctx context.Context, config2 config.Config, session *bun.DB) model.Task {
	alchemyAPI := &web3.AlchemyAPI{
		Config: config2,
	}
	nftTransferMutator := &mutator.NFTTransferMutator{
		Ctx:     ctx,
		Session: session,
	}
	syncETHNFTTransferTaskHandler := &task.SyncETHNFTTransferTaskHandler{
		AlchemyAPI:         alchemyAPI,
		Config:             config2,
		NftTransferMutator: nftTransferMutator,
	}
	return syncETHNFTTransferTaskHandler
}
