// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/authgear/authgear-nft-indexer/pkg/config"
	"github.com/authgear/authgear-nft-indexer/pkg/handler"
	"github.com/authgear/authgear-nft-indexer/pkg/mutator"
	"github.com/authgear/authgear-nft-indexer/pkg/query"
	"github.com/authgear/authgear-nft-indexer/pkg/web3"
	"github.com/gin-gonic/gin"
	"github.com/uptrace/bun"
)

// Injectors from wire.go:

func NewServer(config2 config.Config) Server {
	server := Server{
		config: config2,
	}
	return server
}

func NewRegisterCollectionAPIHandler(ctx *gin.Context, config2 config.Config, session *bun.DB) handler.RegisterCollectionAPIHandler {
	alchemyAPI := &web3.AlchemyAPI{
		Config: config2,
	}
	context := ProvideContext(ctx)
	nftCollectionMutator := &mutator.NFTCollectionMutator{
		Ctx:     context,
		Session: session,
	}
	registerCollectionAPIHandler := handler.RegisterCollectionAPIHandler{
		Ctx:                  ctx,
		Config:               config2,
		AlchemyAPI:           alchemyAPI,
		NFTCollectionMutator: nftCollectionMutator,
	}
	return registerCollectionAPIHandler
}

func NewDeregisterCollectionAPIHandler(ctx *gin.Context, config2 config.Config, session *bun.DB) handler.DeregisterCollectionAPIHandler {
	context := ProvideContext(ctx)
	nftCollectionMutator := &mutator.NFTCollectionMutator{
		Ctx:     context,
		Session: session,
	}
	deregisterCollectionAPIHandler := handler.DeregisterCollectionAPIHandler{
		Ctx:                  ctx,
		NFTCollectionMutator: nftCollectionMutator,
	}
	return deregisterCollectionAPIHandler
}

func NewListCollectionAPIHandler(ctx *gin.Context, config2 config.Config, session *bun.DB) handler.ListCollectionAPIHandler {
	context := ProvideContext(ctx)
	nftCollectionQuery := &query.NFTCollectionQuery{
		Ctx:     context,
		Session: session,
	}
	listCollectionAPIHandler := handler.ListCollectionAPIHandler{
		Ctx:                ctx,
		NFTCollectionQuery: nftCollectionQuery,
	}
	return listCollectionAPIHandler
}

func NewListCollectionOwnerAPIHandler(ctx *gin.Context, config2 config.Config, session *bun.DB) handler.ListCollectionOwnersAPIHandler {
	context := ProvideContext(ctx)
	nftOwnerQuery := query.NFTOwnerQuery{
		Ctx:     context,
		Session: session,
	}
	listCollectionOwnersAPIHandler := handler.ListCollectionOwnersAPIHandler{
		Ctx:           ctx,
		NFTOwnerQuery: nftOwnerQuery,
	}
	return listCollectionOwnersAPIHandler
}

func NewListOwnerNFTAPIHandler(ctx *gin.Context, config2 config.Config, session *bun.DB) handler.ListOwnerNFTAPIHandler {
	context := ProvideContext(ctx)
	nftOwnerQuery := query.NFTOwnerQuery{
		Ctx:     context,
		Session: session,
	}
	listOwnerNFTAPIHandler := handler.ListOwnerNFTAPIHandler{
		Ctx:           ctx,
		NFTOwnerQuery: nftOwnerQuery,
	}
	return listOwnerNFTAPIHandler
}
